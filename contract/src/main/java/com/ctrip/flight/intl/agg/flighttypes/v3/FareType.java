// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agg.flighttypes.v3.proto

package com.ctrip.flight.intl.agg.flighttypes.v3;

/**
 * Protobuf type {@code com.ctrip.flight.intl.agg.flighttypes.v3.FareType}
 */
public  final class FareType extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:com.ctrip.flight.intl.agg.flighttypes.v3.FareType)
    FareTypeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use FareType.newBuilder() to construct.
  private FareType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private FareType() {
    fCSequence_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private FareType(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            fCSequence_ = input.readInt32();
            break;
          }
          case 18: {
            com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType.Builder subBuilder = null;
            if (fareInfo_ != null) {
              subBuilder = fareInfo_.toBuilder();
            }
            fareInfo_ = input.readMessage(com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(fareInfo_);
              fareInfo_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.ctrip.flight.intl.agg.flighttypes.v3.AggFlighttypesV3.internal_static_com_ctrip_flight_intl_agg_flighttypes_v3_FareType_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.ctrip.flight.intl.agg.flighttypes.v3.AggFlighttypesV3.internal_static_com_ctrip_flight_intl_agg_flighttypes_v3_FareType_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.ctrip.flight.intl.agg.flighttypes.v3.FareType.class, com.ctrip.flight.intl.agg.flighttypes.v3.FareType.Builder.class);
  }

  public static final int FCSEQUENCE_FIELD_NUMBER = 1;
  private int fCSequence_;
  /**
   * <code>int32 FCSequence = 1;</code>
   */
  public int getFCSequence() {
    return fCSequence_;
  }

  public static final int FAREINFO_FIELD_NUMBER = 2;
  private com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType fareInfo_;
  /**
   * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType FareInfo = 2;</code>
   */
  public boolean hasFareInfo() {
    return fareInfo_ != null;
  }
  /**
   * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType FareInfo = 2;</code>
   */
  public com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType getFareInfo() {
    return fareInfo_ == null ? com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType.getDefaultInstance() : fareInfo_;
  }
  /**
   * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType FareInfo = 2;</code>
   */
  public com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoTypeOrBuilder getFareInfoOrBuilder() {
    return getFareInfo();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (fCSequence_ != 0) {
      output.writeInt32(1, fCSequence_);
    }
    if (fareInfo_ != null) {
      output.writeMessage(2, getFareInfo());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (fCSequence_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, fCSequence_);
    }
    if (fareInfo_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getFareInfo());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.ctrip.flight.intl.agg.flighttypes.v3.FareType)) {
      return super.equals(obj);
    }
    com.ctrip.flight.intl.agg.flighttypes.v3.FareType other = (com.ctrip.flight.intl.agg.flighttypes.v3.FareType) obj;

    boolean result = true;
    result = result && (getFCSequence()
        == other.getFCSequence());
    result = result && (hasFareInfo() == other.hasFareInfo());
    if (hasFareInfo()) {
      result = result && getFareInfo()
          .equals(other.getFareInfo());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + FCSEQUENCE_FIELD_NUMBER;
    hash = (53 * hash) + getFCSequence();
    if (hasFareInfo()) {
      hash = (37 * hash) + FAREINFO_FIELD_NUMBER;
      hash = (53 * hash) + getFareInfo().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.ctrip.flight.intl.agg.flighttypes.v3.FareType parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.FareType parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.FareType parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.FareType parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.FareType parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.FareType parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.FareType parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.FareType parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.FareType parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.FareType parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.FareType parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.FareType parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.ctrip.flight.intl.agg.flighttypes.v3.FareType prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code com.ctrip.flight.intl.agg.flighttypes.v3.FareType}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:com.ctrip.flight.intl.agg.flighttypes.v3.FareType)
      com.ctrip.flight.intl.agg.flighttypes.v3.FareTypeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ctrip.flight.intl.agg.flighttypes.v3.AggFlighttypesV3.internal_static_com_ctrip_flight_intl_agg_flighttypes_v3_FareType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ctrip.flight.intl.agg.flighttypes.v3.AggFlighttypesV3.internal_static_com_ctrip_flight_intl_agg_flighttypes_v3_FareType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ctrip.flight.intl.agg.flighttypes.v3.FareType.class, com.ctrip.flight.intl.agg.flighttypes.v3.FareType.Builder.class);
    }

    // Construct using com.ctrip.flight.intl.agg.flighttypes.v3.FareType.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      fCSequence_ = 0;

      if (fareInfoBuilder_ == null) {
        fareInfo_ = null;
      } else {
        fareInfo_ = null;
        fareInfoBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.ctrip.flight.intl.agg.flighttypes.v3.AggFlighttypesV3.internal_static_com_ctrip_flight_intl_agg_flighttypes_v3_FareType_descriptor;
    }

    @java.lang.Override
    public com.ctrip.flight.intl.agg.flighttypes.v3.FareType getDefaultInstanceForType() {
      return com.ctrip.flight.intl.agg.flighttypes.v3.FareType.getDefaultInstance();
    }

    @java.lang.Override
    public com.ctrip.flight.intl.agg.flighttypes.v3.FareType build() {
      com.ctrip.flight.intl.agg.flighttypes.v3.FareType result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.ctrip.flight.intl.agg.flighttypes.v3.FareType buildPartial() {
      com.ctrip.flight.intl.agg.flighttypes.v3.FareType result = new com.ctrip.flight.intl.agg.flighttypes.v3.FareType(this);
      result.fCSequence_ = fCSequence_;
      if (fareInfoBuilder_ == null) {
        result.fareInfo_ = fareInfo_;
      } else {
        result.fareInfo_ = fareInfoBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.ctrip.flight.intl.agg.flighttypes.v3.FareType) {
        return mergeFrom((com.ctrip.flight.intl.agg.flighttypes.v3.FareType)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.ctrip.flight.intl.agg.flighttypes.v3.FareType other) {
      if (other == com.ctrip.flight.intl.agg.flighttypes.v3.FareType.getDefaultInstance()) return this;
      if (other.getFCSequence() != 0) {
        setFCSequence(other.getFCSequence());
      }
      if (other.hasFareInfo()) {
        mergeFareInfo(other.getFareInfo());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.ctrip.flight.intl.agg.flighttypes.v3.FareType parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.ctrip.flight.intl.agg.flighttypes.v3.FareType) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int fCSequence_ ;
    /**
     * <code>int32 FCSequence = 1;</code>
     */
    public int getFCSequence() {
      return fCSequence_;
    }
    /**
     * <code>int32 FCSequence = 1;</code>
     */
    public Builder setFCSequence(int value) {
      
      fCSequence_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 FCSequence = 1;</code>
     */
    public Builder clearFCSequence() {
      
      fCSequence_ = 0;
      onChanged();
      return this;
    }

    private com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType fareInfo_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType, com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType.Builder, com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoTypeOrBuilder> fareInfoBuilder_;
    /**
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType FareInfo = 2;</code>
     */
    public boolean hasFareInfo() {
      return fareInfoBuilder_ != null || fareInfo_ != null;
    }
    /**
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType FareInfo = 2;</code>
     */
    public com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType getFareInfo() {
      if (fareInfoBuilder_ == null) {
        return fareInfo_ == null ? com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType.getDefaultInstance() : fareInfo_;
      } else {
        return fareInfoBuilder_.getMessage();
      }
    }
    /**
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType FareInfo = 2;</code>
     */
    public Builder setFareInfo(com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType value) {
      if (fareInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        fareInfo_ = value;
        onChanged();
      } else {
        fareInfoBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType FareInfo = 2;</code>
     */
    public Builder setFareInfo(
        com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType.Builder builderForValue) {
      if (fareInfoBuilder_ == null) {
        fareInfo_ = builderForValue.build();
        onChanged();
      } else {
        fareInfoBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType FareInfo = 2;</code>
     */
    public Builder mergeFareInfo(com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType value) {
      if (fareInfoBuilder_ == null) {
        if (fareInfo_ != null) {
          fareInfo_ =
            com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType.newBuilder(fareInfo_).mergeFrom(value).buildPartial();
        } else {
          fareInfo_ = value;
        }
        onChanged();
      } else {
        fareInfoBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType FareInfo = 2;</code>
     */
    public Builder clearFareInfo() {
      if (fareInfoBuilder_ == null) {
        fareInfo_ = null;
        onChanged();
      } else {
        fareInfo_ = null;
        fareInfoBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType FareInfo = 2;</code>
     */
    public com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType.Builder getFareInfoBuilder() {
      
      onChanged();
      return getFareInfoFieldBuilder().getBuilder();
    }
    /**
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType FareInfo = 2;</code>
     */
    public com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoTypeOrBuilder getFareInfoOrBuilder() {
      if (fareInfoBuilder_ != null) {
        return fareInfoBuilder_.getMessageOrBuilder();
      } else {
        return fareInfo_ == null ?
            com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType.getDefaultInstance() : fareInfo_;
      }
    }
    /**
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType FareInfo = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType, com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType.Builder, com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoTypeOrBuilder> 
        getFareInfoFieldBuilder() {
      if (fareInfoBuilder_ == null) {
        fareInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType, com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoType.Builder, com.ctrip.flight.intl.agg.flighttypes.v3.FareInfoTypeOrBuilder>(
                getFareInfo(),
                getParentForChildren(),
                isClean());
        fareInfo_ = null;
      }
      return fareInfoBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:com.ctrip.flight.intl.agg.flighttypes.v3.FareType)
  }

  // @@protoc_insertion_point(class_scope:com.ctrip.flight.intl.agg.flighttypes.v3.FareType)
  private static final com.ctrip.flight.intl.agg.flighttypes.v3.FareType DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.ctrip.flight.intl.agg.flighttypes.v3.FareType();
  }

  public static com.ctrip.flight.intl.agg.flighttypes.v3.FareType getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FareType>
      PARSER = new com.google.protobuf.AbstractParser<FareType>() {
    @java.lang.Override
    public FareType parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new FareType(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<FareType> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<FareType> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.ctrip.flight.intl.agg.flighttypes.v3.FareType getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

