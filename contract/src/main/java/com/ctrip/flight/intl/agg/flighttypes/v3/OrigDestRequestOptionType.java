// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agg.flighttypes.v3.proto

package com.ctrip.flight.intl.agg.flighttypes.v3;

/**
 * Protobuf type {@code com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType}
 */
public  final class OrigDestRequestOptionType extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType)
    OrigDestRequestOptionTypeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use OrigDestRequestOptionType.newBuilder() to construct.
  private OrigDestRequestOptionType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private OrigDestRequestOptionType() {
    cabinClass_ = java.util.Collections.emptyList();
    carrier_ = "";
    flightNo_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private OrigDestRequestOptionType(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.Builder subBuilder = null;
            if (transferOption_ != null) {
              subBuilder = transferOption_.toBuilder();
            }
            transferOption_ = input.readMessage(com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(transferOption_);
              transferOption_ = subBuilder.buildPartial();
            }

            break;
          }
          case 16: {
            int rawValue = input.readEnum();
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              cabinClass_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000002;
            }
            cabinClass_.add(rawValue);
            break;
          }
          case 18: {
            int length = input.readRawVarint32();
            int oldLimit = input.pushLimit(length);
            while(input.getBytesUntilLimit() > 0) {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cabinClass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cabinClass_.add(rawValue);
            }
            input.popLimit(oldLimit);
            break;
          }
          case 26: {
            com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder subBuilder = null;
            if (departureTimeRange_ != null) {
              subBuilder = departureTimeRange_.toBuilder();
            }
            departureTimeRange_ = input.readMessage(com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(departureTimeRange_);
              departureTimeRange_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder subBuilder = null;
            if (arrivalTimeRange_ != null) {
              subBuilder = arrivalTimeRange_.toBuilder();
            }
            arrivalTimeRange_ = input.readMessage(com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(arrivalTimeRange_);
              arrivalTimeRange_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            carrier_ = s;
            break;
          }
          case 50: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
              flightNo_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000020;
            }
            flightNo_.add(s);
            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        cabinClass_ = java.util.Collections.unmodifiableList(cabinClass_);
      }
      if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
        flightNo_ = flightNo_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.ctrip.flight.intl.agg.flighttypes.v3.AggFlighttypesV3.internal_static_com_ctrip_flight_intl_agg_flighttypes_v3_OrigDestRequestOptionType_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.ctrip.flight.intl.agg.flighttypes.v3.AggFlighttypesV3.internal_static_com_ctrip_flight_intl_agg_flighttypes_v3_OrigDestRequestOptionType_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType.class, com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType.Builder.class);
  }

  private int bitField0_;
  public static final int TRANSFEROPTION_FIELD_NUMBER = 1;
  private com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType transferOption_;
  /**
   * <pre>
   * 中转参数，不填表示不限制
   * </pre>
   *
   * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType TransferOption = 1;</code>
   */
  public boolean hasTransferOption() {
    return transferOption_ != null;
  }
  /**
   * <pre>
   * 中转参数，不填表示不限制
   * </pre>
   *
   * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType TransferOption = 1;</code>
   */
  public com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType getTransferOption() {
    return transferOption_ == null ? com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.getDefaultInstance() : transferOption_;
  }
  /**
   * <pre>
   * 中转参数，不填表示不限制
   * </pre>
   *
   * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType TransferOption = 1;</code>
   */
  public com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionTypeOrBuilder getTransferOptionOrBuilder() {
    return getTransferOption();
  }

  public static final int CABINCLASS_FIELD_NUMBER = 2;
  private java.util.List<java.lang.Integer> cabinClass_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType> cabinClass_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType>() {
            public com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType convert(java.lang.Integer from) {
              @SuppressWarnings("deprecation")
              com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType result = com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType.valueOf(from);
              return result == null ? com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType.UNRECOGNIZED : result;
            }
          };
  /**
   * <pre>
   * 舱等
   * </pre>
   *
   * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
   */
  public java.util.List<com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType> getCabinClassList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType>(cabinClass_, cabinClass_converter_);
  }
  /**
   * <pre>
   * 舱等
   * </pre>
   *
   * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
   */
  public int getCabinClassCount() {
    return cabinClass_.size();
  }
  /**
   * <pre>
   * 舱等
   * </pre>
   *
   * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
   */
  public com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType getCabinClass(int index) {
    return cabinClass_converter_.convert(cabinClass_.get(index));
  }
  /**
   * <pre>
   * 舱等
   * </pre>
   *
   * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
   */
  public java.util.List<java.lang.Integer>
  getCabinClassValueList() {
    return cabinClass_;
  }
  /**
   * <pre>
   * 舱等
   * </pre>
   *
   * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
   */
  public int getCabinClassValue(int index) {
    return cabinClass_.get(index);
  }
  private int cabinClassMemoizedSerializedSize;

  public static final int DEPARTURETIMERANGE_FIELD_NUMBER = 3;
  private com.ctrip.flight.intl.agg.flighttypes.v3.IntRange departureTimeRange_;
  /**
   * <pre>
   * 只支持小时范围(0到24)，如3-5，表示第一程出发时间在3:00-5:00;不填则不限出发时间
   * </pre>
   *
   * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange DepartureTimeRange = 3;</code>
   */
  public boolean hasDepartureTimeRange() {
    return departureTimeRange_ != null;
  }
  /**
   * <pre>
   * 只支持小时范围(0到24)，如3-5，表示第一程出发时间在3:00-5:00;不填则不限出发时间
   * </pre>
   *
   * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange DepartureTimeRange = 3;</code>
   */
  public com.ctrip.flight.intl.agg.flighttypes.v3.IntRange getDepartureTimeRange() {
    return departureTimeRange_ == null ? com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.getDefaultInstance() : departureTimeRange_;
  }
  /**
   * <pre>
   * 只支持小时范围(0到24)，如3-5，表示第一程出发时间在3:00-5:00;不填则不限出发时间
   * </pre>
   *
   * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange DepartureTimeRange = 3;</code>
   */
  public com.ctrip.flight.intl.agg.flighttypes.v3.IntRangeOrBuilder getDepartureTimeRangeOrBuilder() {
    return getDepartureTimeRange();
  }

  public static final int ARRIVALTIMERANGE_FIELD_NUMBER = 4;
  private com.ctrip.flight.intl.agg.flighttypes.v3.IntRange arrivalTimeRange_;
  /**
   * <pre>
   * 只支持小时范围(0到24)，如3-5，表示最后一程到达时间在3:00-5:00; 不填则不限到达时间
   * </pre>
   *
   * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange ArrivalTimeRange = 4;</code>
   */
  public boolean hasArrivalTimeRange() {
    return arrivalTimeRange_ != null;
  }
  /**
   * <pre>
   * 只支持小时范围(0到24)，如3-5，表示最后一程到达时间在3:00-5:00; 不填则不限到达时间
   * </pre>
   *
   * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange ArrivalTimeRange = 4;</code>
   */
  public com.ctrip.flight.intl.agg.flighttypes.v3.IntRange getArrivalTimeRange() {
    return arrivalTimeRange_ == null ? com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.getDefaultInstance() : arrivalTimeRange_;
  }
  /**
   * <pre>
   * 只支持小时范围(0到24)，如3-5，表示最后一程到达时间在3:00-5:00; 不填则不限到达时间
   * </pre>
   *
   * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange ArrivalTimeRange = 4;</code>
   */
  public com.ctrip.flight.intl.agg.flighttypes.v3.IntRangeOrBuilder getArrivalTimeRangeOrBuilder() {
    return getArrivalTimeRange();
  }

  public static final int CARRIER_FIELD_NUMBER = 5;
  private volatile java.lang.Object carrier_;
  /**
   * <pre>
   * 指定用户程的航司（默认MC/OC）
   * </pre>
   *
   * <code>string Carrier = 5;</code>
   */
  public java.lang.String getCarrier() {
    java.lang.Object ref = carrier_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      carrier_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * 指定用户程的航司（默认MC/OC）
   * </pre>
   *
   * <code>string Carrier = 5;</code>
   */
  public com.google.protobuf.ByteString
      getCarrierBytes() {
    java.lang.Object ref = carrier_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      carrier_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int FLIGHTNO_FIELD_NUMBER = 6;
  private com.google.protobuf.LazyStringList flightNo_;
  /**
   * <pre>
   * 指定用户程包含的航班号(默认MC/OC)
   * </pre>
   *
   * <code>repeated string FlightNo = 6;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getFlightNoList() {
    return flightNo_;
  }
  /**
   * <pre>
   * 指定用户程包含的航班号(默认MC/OC)
   * </pre>
   *
   * <code>repeated string FlightNo = 6;</code>
   */
  public int getFlightNoCount() {
    return flightNo_.size();
  }
  /**
   * <pre>
   * 指定用户程包含的航班号(默认MC/OC)
   * </pre>
   *
   * <code>repeated string FlightNo = 6;</code>
   */
  public java.lang.String getFlightNo(int index) {
    return flightNo_.get(index);
  }
  /**
   * <pre>
   * 指定用户程包含的航班号(默认MC/OC)
   * </pre>
   *
   * <code>repeated string FlightNo = 6;</code>
   */
  public com.google.protobuf.ByteString
      getFlightNoBytes(int index) {
    return flightNo_.getByteString(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (transferOption_ != null) {
      output.writeMessage(1, getTransferOption());
    }
    if (getCabinClassList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(cabinClassMemoizedSerializedSize);
    }
    for (int i = 0; i < cabinClass_.size(); i++) {
      output.writeEnumNoTag(cabinClass_.get(i));
    }
    if (departureTimeRange_ != null) {
      output.writeMessage(3, getDepartureTimeRange());
    }
    if (arrivalTimeRange_ != null) {
      output.writeMessage(4, getArrivalTimeRange());
    }
    if (!getCarrierBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, carrier_);
    }
    for (int i = 0; i < flightNo_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, flightNo_.getRaw(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (transferOption_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getTransferOption());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < cabinClass_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(cabinClass_.get(i));
      }
      size += dataSize;
      if (!getCabinClassList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }cabinClassMemoizedSerializedSize = dataSize;
    }
    if (departureTimeRange_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getDepartureTimeRange());
    }
    if (arrivalTimeRange_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getArrivalTimeRange());
    }
    if (!getCarrierBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, carrier_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < flightNo_.size(); i++) {
        dataSize += computeStringSizeNoTag(flightNo_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getFlightNoList().size();
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType)) {
      return super.equals(obj);
    }
    com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType other = (com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType) obj;

    boolean result = true;
    result = result && (hasTransferOption() == other.hasTransferOption());
    if (hasTransferOption()) {
      result = result && getTransferOption()
          .equals(other.getTransferOption());
    }
    result = result && cabinClass_.equals(other.cabinClass_);
    result = result && (hasDepartureTimeRange() == other.hasDepartureTimeRange());
    if (hasDepartureTimeRange()) {
      result = result && getDepartureTimeRange()
          .equals(other.getDepartureTimeRange());
    }
    result = result && (hasArrivalTimeRange() == other.hasArrivalTimeRange());
    if (hasArrivalTimeRange()) {
      result = result && getArrivalTimeRange()
          .equals(other.getArrivalTimeRange());
    }
    result = result && getCarrier()
        .equals(other.getCarrier());
    result = result && getFlightNoList()
        .equals(other.getFlightNoList());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasTransferOption()) {
      hash = (37 * hash) + TRANSFEROPTION_FIELD_NUMBER;
      hash = (53 * hash) + getTransferOption().hashCode();
    }
    if (getCabinClassCount() > 0) {
      hash = (37 * hash) + CABINCLASS_FIELD_NUMBER;
      hash = (53 * hash) + cabinClass_.hashCode();
    }
    if (hasDepartureTimeRange()) {
      hash = (37 * hash) + DEPARTURETIMERANGE_FIELD_NUMBER;
      hash = (53 * hash) + getDepartureTimeRange().hashCode();
    }
    if (hasArrivalTimeRange()) {
      hash = (37 * hash) + ARRIVALTIMERANGE_FIELD_NUMBER;
      hash = (53 * hash) + getArrivalTimeRange().hashCode();
    }
    hash = (37 * hash) + CARRIER_FIELD_NUMBER;
    hash = (53 * hash) + getCarrier().hashCode();
    if (getFlightNoCount() > 0) {
      hash = (37 * hash) + FLIGHTNO_FIELD_NUMBER;
      hash = (53 * hash) + getFlightNoList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType)
      com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionTypeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ctrip.flight.intl.agg.flighttypes.v3.AggFlighttypesV3.internal_static_com_ctrip_flight_intl_agg_flighttypes_v3_OrigDestRequestOptionType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ctrip.flight.intl.agg.flighttypes.v3.AggFlighttypesV3.internal_static_com_ctrip_flight_intl_agg_flighttypes_v3_OrigDestRequestOptionType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType.class, com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType.Builder.class);
    }

    // Construct using com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (transferOptionBuilder_ == null) {
        transferOption_ = null;
      } else {
        transferOption_ = null;
        transferOptionBuilder_ = null;
      }
      cabinClass_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      if (departureTimeRangeBuilder_ == null) {
        departureTimeRange_ = null;
      } else {
        departureTimeRange_ = null;
        departureTimeRangeBuilder_ = null;
      }
      if (arrivalTimeRangeBuilder_ == null) {
        arrivalTimeRange_ = null;
      } else {
        arrivalTimeRange_ = null;
        arrivalTimeRangeBuilder_ = null;
      }
      carrier_ = "";

      flightNo_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000020);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.ctrip.flight.intl.agg.flighttypes.v3.AggFlighttypesV3.internal_static_com_ctrip_flight_intl_agg_flighttypes_v3_OrigDestRequestOptionType_descriptor;
    }

    @java.lang.Override
    public com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType getDefaultInstanceForType() {
      return com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType.getDefaultInstance();
    }

    @java.lang.Override
    public com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType build() {
      com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType buildPartial() {
      com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType result = new com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (transferOptionBuilder_ == null) {
        result.transferOption_ = transferOption_;
      } else {
        result.transferOption_ = transferOptionBuilder_.build();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        cabinClass_ = java.util.Collections.unmodifiableList(cabinClass_);
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.cabinClass_ = cabinClass_;
      if (departureTimeRangeBuilder_ == null) {
        result.departureTimeRange_ = departureTimeRange_;
      } else {
        result.departureTimeRange_ = departureTimeRangeBuilder_.build();
      }
      if (arrivalTimeRangeBuilder_ == null) {
        result.arrivalTimeRange_ = arrivalTimeRange_;
      } else {
        result.arrivalTimeRange_ = arrivalTimeRangeBuilder_.build();
      }
      result.carrier_ = carrier_;
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        flightNo_ = flightNo_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000020);
      }
      result.flightNo_ = flightNo_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType) {
        return mergeFrom((com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType other) {
      if (other == com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType.getDefaultInstance()) return this;
      if (other.hasTransferOption()) {
        mergeTransferOption(other.getTransferOption());
      }
      if (!other.cabinClass_.isEmpty()) {
        if (cabinClass_.isEmpty()) {
          cabinClass_ = other.cabinClass_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureCabinClassIsMutable();
          cabinClass_.addAll(other.cabinClass_);
        }
        onChanged();
      }
      if (other.hasDepartureTimeRange()) {
        mergeDepartureTimeRange(other.getDepartureTimeRange());
      }
      if (other.hasArrivalTimeRange()) {
        mergeArrivalTimeRange(other.getArrivalTimeRange());
      }
      if (!other.getCarrier().isEmpty()) {
        carrier_ = other.carrier_;
        onChanged();
      }
      if (!other.flightNo_.isEmpty()) {
        if (flightNo_.isEmpty()) {
          flightNo_ = other.flightNo_;
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          ensureFlightNoIsMutable();
          flightNo_.addAll(other.flightNo_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType transferOption_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType, com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.Builder, com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionTypeOrBuilder> transferOptionBuilder_;
    /**
     * <pre>
     * 中转参数，不填表示不限制
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType TransferOption = 1;</code>
     */
    public boolean hasTransferOption() {
      return transferOptionBuilder_ != null || transferOption_ != null;
    }
    /**
     * <pre>
     * 中转参数，不填表示不限制
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType TransferOption = 1;</code>
     */
    public com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType getTransferOption() {
      if (transferOptionBuilder_ == null) {
        return transferOption_ == null ? com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.getDefaultInstance() : transferOption_;
      } else {
        return transferOptionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * 中转参数，不填表示不限制
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType TransferOption = 1;</code>
     */
    public Builder setTransferOption(com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType value) {
      if (transferOptionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        transferOption_ = value;
        onChanged();
      } else {
        transferOptionBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * 中转参数，不填表示不限制
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType TransferOption = 1;</code>
     */
    public Builder setTransferOption(
        com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.Builder builderForValue) {
      if (transferOptionBuilder_ == null) {
        transferOption_ = builderForValue.build();
        onChanged();
      } else {
        transferOptionBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * 中转参数，不填表示不限制
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType TransferOption = 1;</code>
     */
    public Builder mergeTransferOption(com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType value) {
      if (transferOptionBuilder_ == null) {
        if (transferOption_ != null) {
          transferOption_ =
            com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.newBuilder(transferOption_).mergeFrom(value).buildPartial();
        } else {
          transferOption_ = value;
        }
        onChanged();
      } else {
        transferOptionBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * 中转参数，不填表示不限制
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType TransferOption = 1;</code>
     */
    public Builder clearTransferOption() {
      if (transferOptionBuilder_ == null) {
        transferOption_ = null;
        onChanged();
      } else {
        transferOption_ = null;
        transferOptionBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * 中转参数，不填表示不限制
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType TransferOption = 1;</code>
     */
    public com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.Builder getTransferOptionBuilder() {
      
      onChanged();
      return getTransferOptionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * 中转参数，不填表示不限制
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType TransferOption = 1;</code>
     */
    public com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionTypeOrBuilder getTransferOptionOrBuilder() {
      if (transferOptionBuilder_ != null) {
        return transferOptionBuilder_.getMessageOrBuilder();
      } else {
        return transferOption_ == null ?
            com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.getDefaultInstance() : transferOption_;
      }
    }
    /**
     * <pre>
     * 中转参数，不填表示不限制
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType TransferOption = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType, com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.Builder, com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionTypeOrBuilder> 
        getTransferOptionFieldBuilder() {
      if (transferOptionBuilder_ == null) {
        transferOptionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType, com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.Builder, com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionTypeOrBuilder>(
                getTransferOption(),
                getParentForChildren(),
                isClean());
        transferOption_ = null;
      }
      return transferOptionBuilder_;
    }

    private java.util.List<java.lang.Integer> cabinClass_ =
      java.util.Collections.emptyList();
    private void ensureCabinClassIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        cabinClass_ = new java.util.ArrayList<java.lang.Integer>(cabinClass_);
        bitField0_ |= 0x00000002;
      }
    }
    /**
     * <pre>
     * 舱等
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
     */
    public java.util.List<com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType> getCabinClassList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType>(cabinClass_, cabinClass_converter_);
    }
    /**
     * <pre>
     * 舱等
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
     */
    public int getCabinClassCount() {
      return cabinClass_.size();
    }
    /**
     * <pre>
     * 舱等
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
     */
    public com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType getCabinClass(int index) {
      return cabinClass_converter_.convert(cabinClass_.get(index));
    }
    /**
     * <pre>
     * 舱等
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
     */
    public Builder setCabinClass(
        int index, com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureCabinClassIsMutable();
      cabinClass_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 舱等
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
     */
    public Builder addCabinClass(com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureCabinClassIsMutable();
      cabinClass_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 舱等
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
     */
    public Builder addAllCabinClass(
        java.lang.Iterable<? extends com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType> values) {
      ensureCabinClassIsMutable();
      for (com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType value : values) {
        cabinClass_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 舱等
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
     */
    public Builder clearCabinClass() {
      cabinClass_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 舱等
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
     */
    public java.util.List<java.lang.Integer>
    getCabinClassValueList() {
      return java.util.Collections.unmodifiableList(cabinClass_);
    }
    /**
     * <pre>
     * 舱等
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
     */
    public int getCabinClassValue(int index) {
      return cabinClass_.get(index);
    }
    /**
     * <pre>
     * 舱等
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
     */
    public Builder setCabinClassValue(
        int index, int value) {
      ensureCabinClassIsMutable();
      cabinClass_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 舱等
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
     */
    public Builder addCabinClassValue(int value) {
      ensureCabinClassIsMutable();
      cabinClass_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 舱等
     * </pre>
     *
     * <code>repeated .com.ctrip.flight.intl.agg.flighttypes.v3.CabinClassType CabinClass = 2;</code>
     */
    public Builder addAllCabinClassValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureCabinClassIsMutable();
      for (int value : values) {
        cabinClass_.add(value);
      }
      onChanged();
      return this;
    }

    private com.ctrip.flight.intl.agg.flighttypes.v3.IntRange departureTimeRange_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.ctrip.flight.intl.agg.flighttypes.v3.IntRange, com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder, com.ctrip.flight.intl.agg.flighttypes.v3.IntRangeOrBuilder> departureTimeRangeBuilder_;
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示第一程出发时间在3:00-5:00;不填则不限出发时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange DepartureTimeRange = 3;</code>
     */
    public boolean hasDepartureTimeRange() {
      return departureTimeRangeBuilder_ != null || departureTimeRange_ != null;
    }
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示第一程出发时间在3:00-5:00;不填则不限出发时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange DepartureTimeRange = 3;</code>
     */
    public com.ctrip.flight.intl.agg.flighttypes.v3.IntRange getDepartureTimeRange() {
      if (departureTimeRangeBuilder_ == null) {
        return departureTimeRange_ == null ? com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.getDefaultInstance() : departureTimeRange_;
      } else {
        return departureTimeRangeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示第一程出发时间在3:00-5:00;不填则不限出发时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange DepartureTimeRange = 3;</code>
     */
    public Builder setDepartureTimeRange(com.ctrip.flight.intl.agg.flighttypes.v3.IntRange value) {
      if (departureTimeRangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        departureTimeRange_ = value;
        onChanged();
      } else {
        departureTimeRangeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示第一程出发时间在3:00-5:00;不填则不限出发时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange DepartureTimeRange = 3;</code>
     */
    public Builder setDepartureTimeRange(
        com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder builderForValue) {
      if (departureTimeRangeBuilder_ == null) {
        departureTimeRange_ = builderForValue.build();
        onChanged();
      } else {
        departureTimeRangeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示第一程出发时间在3:00-5:00;不填则不限出发时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange DepartureTimeRange = 3;</code>
     */
    public Builder mergeDepartureTimeRange(com.ctrip.flight.intl.agg.flighttypes.v3.IntRange value) {
      if (departureTimeRangeBuilder_ == null) {
        if (departureTimeRange_ != null) {
          departureTimeRange_ =
            com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.newBuilder(departureTimeRange_).mergeFrom(value).buildPartial();
        } else {
          departureTimeRange_ = value;
        }
        onChanged();
      } else {
        departureTimeRangeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示第一程出发时间在3:00-5:00;不填则不限出发时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange DepartureTimeRange = 3;</code>
     */
    public Builder clearDepartureTimeRange() {
      if (departureTimeRangeBuilder_ == null) {
        departureTimeRange_ = null;
        onChanged();
      } else {
        departureTimeRange_ = null;
        departureTimeRangeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示第一程出发时间在3:00-5:00;不填则不限出发时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange DepartureTimeRange = 3;</code>
     */
    public com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder getDepartureTimeRangeBuilder() {
      
      onChanged();
      return getDepartureTimeRangeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示第一程出发时间在3:00-5:00;不填则不限出发时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange DepartureTimeRange = 3;</code>
     */
    public com.ctrip.flight.intl.agg.flighttypes.v3.IntRangeOrBuilder getDepartureTimeRangeOrBuilder() {
      if (departureTimeRangeBuilder_ != null) {
        return departureTimeRangeBuilder_.getMessageOrBuilder();
      } else {
        return departureTimeRange_ == null ?
            com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.getDefaultInstance() : departureTimeRange_;
      }
    }
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示第一程出发时间在3:00-5:00;不填则不限出发时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange DepartureTimeRange = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.ctrip.flight.intl.agg.flighttypes.v3.IntRange, com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder, com.ctrip.flight.intl.agg.flighttypes.v3.IntRangeOrBuilder> 
        getDepartureTimeRangeFieldBuilder() {
      if (departureTimeRangeBuilder_ == null) {
        departureTimeRangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.ctrip.flight.intl.agg.flighttypes.v3.IntRange, com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder, com.ctrip.flight.intl.agg.flighttypes.v3.IntRangeOrBuilder>(
                getDepartureTimeRange(),
                getParentForChildren(),
                isClean());
        departureTimeRange_ = null;
      }
      return departureTimeRangeBuilder_;
    }

    private com.ctrip.flight.intl.agg.flighttypes.v3.IntRange arrivalTimeRange_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.ctrip.flight.intl.agg.flighttypes.v3.IntRange, com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder, com.ctrip.flight.intl.agg.flighttypes.v3.IntRangeOrBuilder> arrivalTimeRangeBuilder_;
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示最后一程到达时间在3:00-5:00; 不填则不限到达时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange ArrivalTimeRange = 4;</code>
     */
    public boolean hasArrivalTimeRange() {
      return arrivalTimeRangeBuilder_ != null || arrivalTimeRange_ != null;
    }
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示最后一程到达时间在3:00-5:00; 不填则不限到达时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange ArrivalTimeRange = 4;</code>
     */
    public com.ctrip.flight.intl.agg.flighttypes.v3.IntRange getArrivalTimeRange() {
      if (arrivalTimeRangeBuilder_ == null) {
        return arrivalTimeRange_ == null ? com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.getDefaultInstance() : arrivalTimeRange_;
      } else {
        return arrivalTimeRangeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示最后一程到达时间在3:00-5:00; 不填则不限到达时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange ArrivalTimeRange = 4;</code>
     */
    public Builder setArrivalTimeRange(com.ctrip.flight.intl.agg.flighttypes.v3.IntRange value) {
      if (arrivalTimeRangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        arrivalTimeRange_ = value;
        onChanged();
      } else {
        arrivalTimeRangeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示最后一程到达时间在3:00-5:00; 不填则不限到达时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange ArrivalTimeRange = 4;</code>
     */
    public Builder setArrivalTimeRange(
        com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder builderForValue) {
      if (arrivalTimeRangeBuilder_ == null) {
        arrivalTimeRange_ = builderForValue.build();
        onChanged();
      } else {
        arrivalTimeRangeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示最后一程到达时间在3:00-5:00; 不填则不限到达时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange ArrivalTimeRange = 4;</code>
     */
    public Builder mergeArrivalTimeRange(com.ctrip.flight.intl.agg.flighttypes.v3.IntRange value) {
      if (arrivalTimeRangeBuilder_ == null) {
        if (arrivalTimeRange_ != null) {
          arrivalTimeRange_ =
            com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.newBuilder(arrivalTimeRange_).mergeFrom(value).buildPartial();
        } else {
          arrivalTimeRange_ = value;
        }
        onChanged();
      } else {
        arrivalTimeRangeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示最后一程到达时间在3:00-5:00; 不填则不限到达时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange ArrivalTimeRange = 4;</code>
     */
    public Builder clearArrivalTimeRange() {
      if (arrivalTimeRangeBuilder_ == null) {
        arrivalTimeRange_ = null;
        onChanged();
      } else {
        arrivalTimeRange_ = null;
        arrivalTimeRangeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示最后一程到达时间在3:00-5:00; 不填则不限到达时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange ArrivalTimeRange = 4;</code>
     */
    public com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder getArrivalTimeRangeBuilder() {
      
      onChanged();
      return getArrivalTimeRangeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示最后一程到达时间在3:00-5:00; 不填则不限到达时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange ArrivalTimeRange = 4;</code>
     */
    public com.ctrip.flight.intl.agg.flighttypes.v3.IntRangeOrBuilder getArrivalTimeRangeOrBuilder() {
      if (arrivalTimeRangeBuilder_ != null) {
        return arrivalTimeRangeBuilder_.getMessageOrBuilder();
      } else {
        return arrivalTimeRange_ == null ?
            com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.getDefaultInstance() : arrivalTimeRange_;
      }
    }
    /**
     * <pre>
     * 只支持小时范围(0到24)，如3-5，表示最后一程到达时间在3:00-5:00; 不填则不限到达时间
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange ArrivalTimeRange = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.ctrip.flight.intl.agg.flighttypes.v3.IntRange, com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder, com.ctrip.flight.intl.agg.flighttypes.v3.IntRangeOrBuilder> 
        getArrivalTimeRangeFieldBuilder() {
      if (arrivalTimeRangeBuilder_ == null) {
        arrivalTimeRangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.ctrip.flight.intl.agg.flighttypes.v3.IntRange, com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder, com.ctrip.flight.intl.agg.flighttypes.v3.IntRangeOrBuilder>(
                getArrivalTimeRange(),
                getParentForChildren(),
                isClean());
        arrivalTimeRange_ = null;
      }
      return arrivalTimeRangeBuilder_;
    }

    private java.lang.Object carrier_ = "";
    /**
     * <pre>
     * 指定用户程的航司（默认MC/OC）
     * </pre>
     *
     * <code>string Carrier = 5;</code>
     */
    public java.lang.String getCarrier() {
      java.lang.Object ref = carrier_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        carrier_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * 指定用户程的航司（默认MC/OC）
     * </pre>
     *
     * <code>string Carrier = 5;</code>
     */
    public com.google.protobuf.ByteString
        getCarrierBytes() {
      java.lang.Object ref = carrier_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        carrier_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * 指定用户程的航司（默认MC/OC）
     * </pre>
     *
     * <code>string Carrier = 5;</code>
     */
    public Builder setCarrier(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      carrier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 指定用户程的航司（默认MC/OC）
     * </pre>
     *
     * <code>string Carrier = 5;</code>
     */
    public Builder clearCarrier() {
      
      carrier_ = getDefaultInstance().getCarrier();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 指定用户程的航司（默认MC/OC）
     * </pre>
     *
     * <code>string Carrier = 5;</code>
     */
    public Builder setCarrierBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      carrier_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList flightNo_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureFlightNoIsMutable() {
      if (!((bitField0_ & 0x00000020) == 0x00000020)) {
        flightNo_ = new com.google.protobuf.LazyStringArrayList(flightNo_);
        bitField0_ |= 0x00000020;
       }
    }
    /**
     * <pre>
     * 指定用户程包含的航班号(默认MC/OC)
     * </pre>
     *
     * <code>repeated string FlightNo = 6;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getFlightNoList() {
      return flightNo_.getUnmodifiableView();
    }
    /**
     * <pre>
     * 指定用户程包含的航班号(默认MC/OC)
     * </pre>
     *
     * <code>repeated string FlightNo = 6;</code>
     */
    public int getFlightNoCount() {
      return flightNo_.size();
    }
    /**
     * <pre>
     * 指定用户程包含的航班号(默认MC/OC)
     * </pre>
     *
     * <code>repeated string FlightNo = 6;</code>
     */
    public java.lang.String getFlightNo(int index) {
      return flightNo_.get(index);
    }
    /**
     * <pre>
     * 指定用户程包含的航班号(默认MC/OC)
     * </pre>
     *
     * <code>repeated string FlightNo = 6;</code>
     */
    public com.google.protobuf.ByteString
        getFlightNoBytes(int index) {
      return flightNo_.getByteString(index);
    }
    /**
     * <pre>
     * 指定用户程包含的航班号(默认MC/OC)
     * </pre>
     *
     * <code>repeated string FlightNo = 6;</code>
     */
    public Builder setFlightNo(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureFlightNoIsMutable();
      flightNo_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 指定用户程包含的航班号(默认MC/OC)
     * </pre>
     *
     * <code>repeated string FlightNo = 6;</code>
     */
    public Builder addFlightNo(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureFlightNoIsMutable();
      flightNo_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 指定用户程包含的航班号(默认MC/OC)
     * </pre>
     *
     * <code>repeated string FlightNo = 6;</code>
     */
    public Builder addAllFlightNo(
        java.lang.Iterable<java.lang.String> values) {
      ensureFlightNoIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, flightNo_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 指定用户程包含的航班号(默认MC/OC)
     * </pre>
     *
     * <code>repeated string FlightNo = 6;</code>
     */
    public Builder clearFlightNo() {
      flightNo_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 指定用户程包含的航班号(默认MC/OC)
     * </pre>
     *
     * <code>repeated string FlightNo = 6;</code>
     */
    public Builder addFlightNoBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureFlightNoIsMutable();
      flightNo_.add(value);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType)
  }

  // @@protoc_insertion_point(class_scope:com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType)
  private static final com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType();
  }

  public static com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<OrigDestRequestOptionType>
      PARSER = new com.google.protobuf.AbstractParser<OrigDestRequestOptionType>() {
    @java.lang.Override
    public OrigDestRequestOptionType parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new OrigDestRequestOptionType(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<OrigDestRequestOptionType> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<OrigDestRequestOptionType> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.ctrip.flight.intl.agg.flighttypes.v3.OrigDestRequestOptionType getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

