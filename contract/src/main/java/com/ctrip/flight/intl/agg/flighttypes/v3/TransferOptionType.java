// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agg.flighttypes.v3.proto

package com.ctrip.flight.intl.agg.flighttypes.v3;

/**
 * Protobuf type {@code com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType}
 */
public  final class TransferOptionType extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType)
    TransferOptionTypeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TransferOptionType.newBuilder() to construct.
  private TransferOptionType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TransferOptionType() {
    transferType_ = 0;
    transferCity_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private TransferOptionType(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            transferType_ = input.readInt32();
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              transferCity_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            transferCity_.add(s);
            break;
          }
          case 26: {
            com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder subBuilder = null;
            if (transferTimeRange_ != null) {
              subBuilder = transferTimeRange_.toBuilder();
            }
            transferTimeRange_ = input.readMessage(com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(transferTimeRange_);
              transferTimeRange_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        transferCity_ = transferCity_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.ctrip.flight.intl.agg.flighttypes.v3.AggFlighttypesV3.internal_static_com_ctrip_flight_intl_agg_flighttypes_v3_TransferOptionType_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.ctrip.flight.intl.agg.flighttypes.v3.AggFlighttypesV3.internal_static_com_ctrip_flight_intl_agg_flighttypes_v3_TransferOptionType_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.class, com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.Builder.class);
  }

  private int bitField0_;
  public static final int TRANSFERTYPE_FIELD_NUMBER = 1;
  private int transferType_;
  /**
   * <pre>
   * 0:不限制  1：直飞  2：中转
   * </pre>
   *
   * <code>int32 TransferType = 1;</code>
   */
  public int getTransferType() {
    return transferType_;
  }

  public static final int TRANSFERCITY_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList transferCity_;
  /**
   * <pre>
   *表示行程包含这个中转点；不填表示中转点不限
   * </pre>
   *
   * <code>repeated string TransferCity = 2;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getTransferCityList() {
    return transferCity_;
  }
  /**
   * <pre>
   *表示行程包含这个中转点；不填表示中转点不限
   * </pre>
   *
   * <code>repeated string TransferCity = 2;</code>
   */
  public int getTransferCityCount() {
    return transferCity_.size();
  }
  /**
   * <pre>
   *表示行程包含这个中转点；不填表示中转点不限
   * </pre>
   *
   * <code>repeated string TransferCity = 2;</code>
   */
  public java.lang.String getTransferCity(int index) {
    return transferCity_.get(index);
  }
  /**
   * <pre>
   *表示行程包含这个中转点；不填表示中转点不限
   * </pre>
   *
   * <code>repeated string TransferCity = 2;</code>
   */
  public com.google.protobuf.ByteString
      getTransferCityBytes(int index) {
    return transferCity_.getByteString(index);
  }

  public static final int TRANSFERTIMERANGE_FIELD_NUMBER = 3;
  private com.ctrip.flight.intl.agg.flighttypes.v3.IntRange transferTimeRange_;
  /**
   * <pre>
   * 只支持一个中转时长范围,如a-b，表示中转时长在[a,b]分钟内；不填表示时长不限
   * </pre>
   *
   * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange TransferTimeRange = 3;</code>
   */
  public boolean hasTransferTimeRange() {
    return transferTimeRange_ != null;
  }
  /**
   * <pre>
   * 只支持一个中转时长范围,如a-b，表示中转时长在[a,b]分钟内；不填表示时长不限
   * </pre>
   *
   * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange TransferTimeRange = 3;</code>
   */
  public com.ctrip.flight.intl.agg.flighttypes.v3.IntRange getTransferTimeRange() {
    return transferTimeRange_ == null ? com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.getDefaultInstance() : transferTimeRange_;
  }
  /**
   * <pre>
   * 只支持一个中转时长范围,如a-b，表示中转时长在[a,b]分钟内；不填表示时长不限
   * </pre>
   *
   * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange TransferTimeRange = 3;</code>
   */
  public com.ctrip.flight.intl.agg.flighttypes.v3.IntRangeOrBuilder getTransferTimeRangeOrBuilder() {
    return getTransferTimeRange();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (transferType_ != 0) {
      output.writeInt32(1, transferType_);
    }
    for (int i = 0; i < transferCity_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, transferCity_.getRaw(i));
    }
    if (transferTimeRange_ != null) {
      output.writeMessage(3, getTransferTimeRange());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (transferType_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, transferType_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < transferCity_.size(); i++) {
        dataSize += computeStringSizeNoTag(transferCity_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getTransferCityList().size();
    }
    if (transferTimeRange_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getTransferTimeRange());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType)) {
      return super.equals(obj);
    }
    com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType other = (com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType) obj;

    boolean result = true;
    result = result && (getTransferType()
        == other.getTransferType());
    result = result && getTransferCityList()
        .equals(other.getTransferCityList());
    result = result && (hasTransferTimeRange() == other.hasTransferTimeRange());
    if (hasTransferTimeRange()) {
      result = result && getTransferTimeRange()
          .equals(other.getTransferTimeRange());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TRANSFERTYPE_FIELD_NUMBER;
    hash = (53 * hash) + getTransferType();
    if (getTransferCityCount() > 0) {
      hash = (37 * hash) + TRANSFERCITY_FIELD_NUMBER;
      hash = (53 * hash) + getTransferCityList().hashCode();
    }
    if (hasTransferTimeRange()) {
      hash = (37 * hash) + TRANSFERTIMERANGE_FIELD_NUMBER;
      hash = (53 * hash) + getTransferTimeRange().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType)
      com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionTypeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ctrip.flight.intl.agg.flighttypes.v3.AggFlighttypesV3.internal_static_com_ctrip_flight_intl_agg_flighttypes_v3_TransferOptionType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ctrip.flight.intl.agg.flighttypes.v3.AggFlighttypesV3.internal_static_com_ctrip_flight_intl_agg_flighttypes_v3_TransferOptionType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.class, com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.Builder.class);
    }

    // Construct using com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      transferType_ = 0;

      transferCity_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      if (transferTimeRangeBuilder_ == null) {
        transferTimeRange_ = null;
      } else {
        transferTimeRange_ = null;
        transferTimeRangeBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.ctrip.flight.intl.agg.flighttypes.v3.AggFlighttypesV3.internal_static_com_ctrip_flight_intl_agg_flighttypes_v3_TransferOptionType_descriptor;
    }

    @java.lang.Override
    public com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType getDefaultInstanceForType() {
      return com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.getDefaultInstance();
    }

    @java.lang.Override
    public com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType build() {
      com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType buildPartial() {
      com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType result = new com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.transferType_ = transferType_;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        transferCity_ = transferCity_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.transferCity_ = transferCity_;
      if (transferTimeRangeBuilder_ == null) {
        result.transferTimeRange_ = transferTimeRange_;
      } else {
        result.transferTimeRange_ = transferTimeRangeBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType) {
        return mergeFrom((com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType other) {
      if (other == com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType.getDefaultInstance()) return this;
      if (other.getTransferType() != 0) {
        setTransferType(other.getTransferType());
      }
      if (!other.transferCity_.isEmpty()) {
        if (transferCity_.isEmpty()) {
          transferCity_ = other.transferCity_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureTransferCityIsMutable();
          transferCity_.addAll(other.transferCity_);
        }
        onChanged();
      }
      if (other.hasTransferTimeRange()) {
        mergeTransferTimeRange(other.getTransferTimeRange());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int transferType_ ;
    /**
     * <pre>
     * 0:不限制  1：直飞  2：中转
     * </pre>
     *
     * <code>int32 TransferType = 1;</code>
     */
    public int getTransferType() {
      return transferType_;
    }
    /**
     * <pre>
     * 0:不限制  1：直飞  2：中转
     * </pre>
     *
     * <code>int32 TransferType = 1;</code>
     */
    public Builder setTransferType(int value) {
      
      transferType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 0:不限制  1：直飞  2：中转
     * </pre>
     *
     * <code>int32 TransferType = 1;</code>
     */
    public Builder clearTransferType() {
      
      transferType_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList transferCity_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureTransferCityIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        transferCity_ = new com.google.protobuf.LazyStringArrayList(transferCity_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     *表示行程包含这个中转点；不填表示中转点不限
     * </pre>
     *
     * <code>repeated string TransferCity = 2;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getTransferCityList() {
      return transferCity_.getUnmodifiableView();
    }
    /**
     * <pre>
     *表示行程包含这个中转点；不填表示中转点不限
     * </pre>
     *
     * <code>repeated string TransferCity = 2;</code>
     */
    public int getTransferCityCount() {
      return transferCity_.size();
    }
    /**
     * <pre>
     *表示行程包含这个中转点；不填表示中转点不限
     * </pre>
     *
     * <code>repeated string TransferCity = 2;</code>
     */
    public java.lang.String getTransferCity(int index) {
      return transferCity_.get(index);
    }
    /**
     * <pre>
     *表示行程包含这个中转点；不填表示中转点不限
     * </pre>
     *
     * <code>repeated string TransferCity = 2;</code>
     */
    public com.google.protobuf.ByteString
        getTransferCityBytes(int index) {
      return transferCity_.getByteString(index);
    }
    /**
     * <pre>
     *表示行程包含这个中转点；不填表示中转点不限
     * </pre>
     *
     * <code>repeated string TransferCity = 2;</code>
     */
    public Builder setTransferCity(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureTransferCityIsMutable();
      transferCity_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *表示行程包含这个中转点；不填表示中转点不限
     * </pre>
     *
     * <code>repeated string TransferCity = 2;</code>
     */
    public Builder addTransferCity(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureTransferCityIsMutable();
      transferCity_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *表示行程包含这个中转点；不填表示中转点不限
     * </pre>
     *
     * <code>repeated string TransferCity = 2;</code>
     */
    public Builder addAllTransferCity(
        java.lang.Iterable<java.lang.String> values) {
      ensureTransferCityIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, transferCity_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *表示行程包含这个中转点；不填表示中转点不限
     * </pre>
     *
     * <code>repeated string TransferCity = 2;</code>
     */
    public Builder clearTransferCity() {
      transferCity_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *表示行程包含这个中转点；不填表示中转点不限
     * </pre>
     *
     * <code>repeated string TransferCity = 2;</code>
     */
    public Builder addTransferCityBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureTransferCityIsMutable();
      transferCity_.add(value);
      onChanged();
      return this;
    }

    private com.ctrip.flight.intl.agg.flighttypes.v3.IntRange transferTimeRange_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.ctrip.flight.intl.agg.flighttypes.v3.IntRange, com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder, com.ctrip.flight.intl.agg.flighttypes.v3.IntRangeOrBuilder> transferTimeRangeBuilder_;
    /**
     * <pre>
     * 只支持一个中转时长范围,如a-b，表示中转时长在[a,b]分钟内；不填表示时长不限
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange TransferTimeRange = 3;</code>
     */
    public boolean hasTransferTimeRange() {
      return transferTimeRangeBuilder_ != null || transferTimeRange_ != null;
    }
    /**
     * <pre>
     * 只支持一个中转时长范围,如a-b，表示中转时长在[a,b]分钟内；不填表示时长不限
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange TransferTimeRange = 3;</code>
     */
    public com.ctrip.flight.intl.agg.flighttypes.v3.IntRange getTransferTimeRange() {
      if (transferTimeRangeBuilder_ == null) {
        return transferTimeRange_ == null ? com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.getDefaultInstance() : transferTimeRange_;
      } else {
        return transferTimeRangeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * 只支持一个中转时长范围,如a-b，表示中转时长在[a,b]分钟内；不填表示时长不限
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange TransferTimeRange = 3;</code>
     */
    public Builder setTransferTimeRange(com.ctrip.flight.intl.agg.flighttypes.v3.IntRange value) {
      if (transferTimeRangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        transferTimeRange_ = value;
        onChanged();
      } else {
        transferTimeRangeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * 只支持一个中转时长范围,如a-b，表示中转时长在[a,b]分钟内；不填表示时长不限
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange TransferTimeRange = 3;</code>
     */
    public Builder setTransferTimeRange(
        com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder builderForValue) {
      if (transferTimeRangeBuilder_ == null) {
        transferTimeRange_ = builderForValue.build();
        onChanged();
      } else {
        transferTimeRangeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * 只支持一个中转时长范围,如a-b，表示中转时长在[a,b]分钟内；不填表示时长不限
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange TransferTimeRange = 3;</code>
     */
    public Builder mergeTransferTimeRange(com.ctrip.flight.intl.agg.flighttypes.v3.IntRange value) {
      if (transferTimeRangeBuilder_ == null) {
        if (transferTimeRange_ != null) {
          transferTimeRange_ =
            com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.newBuilder(transferTimeRange_).mergeFrom(value).buildPartial();
        } else {
          transferTimeRange_ = value;
        }
        onChanged();
      } else {
        transferTimeRangeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * 只支持一个中转时长范围,如a-b，表示中转时长在[a,b]分钟内；不填表示时长不限
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange TransferTimeRange = 3;</code>
     */
    public Builder clearTransferTimeRange() {
      if (transferTimeRangeBuilder_ == null) {
        transferTimeRange_ = null;
        onChanged();
      } else {
        transferTimeRange_ = null;
        transferTimeRangeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * 只支持一个中转时长范围,如a-b，表示中转时长在[a,b]分钟内；不填表示时长不限
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange TransferTimeRange = 3;</code>
     */
    public com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder getTransferTimeRangeBuilder() {
      
      onChanged();
      return getTransferTimeRangeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * 只支持一个中转时长范围,如a-b，表示中转时长在[a,b]分钟内；不填表示时长不限
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange TransferTimeRange = 3;</code>
     */
    public com.ctrip.flight.intl.agg.flighttypes.v3.IntRangeOrBuilder getTransferTimeRangeOrBuilder() {
      if (transferTimeRangeBuilder_ != null) {
        return transferTimeRangeBuilder_.getMessageOrBuilder();
      } else {
        return transferTimeRange_ == null ?
            com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.getDefaultInstance() : transferTimeRange_;
      }
    }
    /**
     * <pre>
     * 只支持一个中转时长范围,如a-b，表示中转时长在[a,b]分钟内；不填表示时长不限
     * </pre>
     *
     * <code>.com.ctrip.flight.intl.agg.flighttypes.v3.IntRange TransferTimeRange = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.ctrip.flight.intl.agg.flighttypes.v3.IntRange, com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder, com.ctrip.flight.intl.agg.flighttypes.v3.IntRangeOrBuilder> 
        getTransferTimeRangeFieldBuilder() {
      if (transferTimeRangeBuilder_ == null) {
        transferTimeRangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.ctrip.flight.intl.agg.flighttypes.v3.IntRange, com.ctrip.flight.intl.agg.flighttypes.v3.IntRange.Builder, com.ctrip.flight.intl.agg.flighttypes.v3.IntRangeOrBuilder>(
                getTransferTimeRange(),
                getParentForChildren(),
                isClean());
        transferTimeRange_ = null;
      }
      return transferTimeRangeBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType)
  }

  // @@protoc_insertion_point(class_scope:com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType)
  private static final com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType();
  }

  public static com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TransferOptionType>
      PARSER = new com.google.protobuf.AbstractParser<TransferOptionType>() {
    @java.lang.Override
    public TransferOptionType parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new TransferOptionType(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<TransferOptionType> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TransferOptionType> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.ctrip.flight.intl.agg.flighttypes.v3.TransferOptionType getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

